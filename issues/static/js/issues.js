// Generated by CoffeeScript 1.6.3
(function() {
  var AppRouter, Comment, CommentCollection, CommentListItemView, CommentListView, Issue, IssueCollection, IssueListItemView, IssueListView, IssueView, Label, NewIssuePanel, Panel, app, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app = null;

  jQuery.fn.serializeObject = function() {
    var data;
    data = {};
    jQuery(jQuery(this).serializeArray()).each(function(i, pair) {
      return data[pair.name] = pair.value;
    });
    return data;
  };

  Issue = (function(_super) {
    __extends(Issue, _super);

    function Issue() {
      _ref = Issue.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Issue.prototype.defaults = {
      id: null,
      title: '',
      description: ''
    };

    Issue.prototype.initialize = function() {
      return this.comments = new CommentCollection([], {
        issue: this
      });
    };

    return Issue;

  })(Backbone.Model);

  Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment() {
      _ref1 = Comment.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Comment;

  })(Backbone.Model);

  Label = (function(_super) {
    __extends(Label, _super);

    function Label() {
      _ref2 = Label.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return Label;

  })(Backbone.Model);

  IssueCollection = (function(_super) {
    __extends(IssueCollection, _super);

    function IssueCollection() {
      _ref3 = IssueCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    IssueCollection.prototype.model = Issue;

    IssueCollection.prototype.url = '/api/issues';

    return IssueCollection;

  })(Backbone.Collection);

  IssueListView = (function(_super) {
    __extends(IssueListView, _super);

    function IssueListView() {
      _ref4 = IssueListView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    IssueListView.prototype.initialize = function() {
      this.model.on('reset', this.render, this);
      return this.model.on('add', this.renderIssue, this);
    };

    IssueListView.prototype.render = function(eventName) {
      var issue, _i, _len, _ref5, _results;
      this.$el.html('');
      _ref5 = this.model.models;
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        issue = _ref5[_i];
        _results.push(this.renderIssue(issue));
      }
      return _results;
    };

    IssueListView.prototype.renderIssue = function(issue) {
      var view;
      view = new IssueListItemView({
        model: issue
      });
      return this.$el.append(view.render());
    };

    return IssueListView;

  })(Backbone.View);

  IssueListItemView = (function(_super) {
    __extends(IssueListItemView, _super);

    function IssueListItemView() {
      _ref5 = IssueListItemView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    IssueListItemView.prototype.tagName = 'li';

    IssueListItemView.prototype.template = _.template(jQuery('#tpl-issue-list-item').text());

    IssueListItemView.prototype.initialize = function() {
      return this.$el.addClass('list-group-item');
    };

    IssueListItemView.prototype.render = function(eventName) {
      return this.$el.html(this.template(this.model.toJSON()));
    };

    return IssueListItemView;

  })(Backbone.View);

  IssueView = (function(_super) {
    __extends(IssueView, _super);

    function IssueView() {
      _ref6 = IssueView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    IssueView.prototype.initialize = function() {
      return this.model.comments.fetch();
    };

    IssueView.prototype.render = function(eventName) {
      var commentListView;
      console.log('rending to', this.$el.get(0));
      this.$el.find('.issue-title').text(this.model.get('title'));
      this.$el.find('.issue-description').html(this.model.get('description'));
      commentListView = new CommentListView({
        model: this.model.comments,
        el: this.$el.find('.comments')
      });
      commentListView.render();
      return this.el;
    };

    return IssueView;

  })(Backbone.View);

  CommentCollection = (function(_super) {
    __extends(CommentCollection, _super);

    function CommentCollection() {
      _ref7 = CommentCollection.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    CommentCollection.prototype.model = Comment;

    CommentCollection.prototype.initialize = function(models, options) {
      this.issue = options.issue;
      return this.url = "/api/issues/" + (this.issue.get('id')) + "/comments";
    };

    return CommentCollection;

  })(Backbone.Collection);

  CommentListView = (function(_super) {
    __extends(CommentListView, _super);

    function CommentListView() {
      _ref8 = CommentListView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    CommentListView.prototype.events = {
      'submit form': function(evt) {
        evt.preventDefault();
        return this.addComment();
      },
      'keypress textarea': function(evt) {
        if (evt.keyCode === 13 && (evt.ctrlKey || evt.metaKey)) {
          return this.addComment();
        }
      }
    };

    CommentListView.prototype.initialize = function() {
      return this.model.on('add', this.renderComment, this);
    };

    CommentListView.prototype.render = function(eventName) {
      var comment, _i, _len, _ref9, _results;
      _ref9 = this.model.models;
      _results = [];
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        comment = _ref9[_i];
        _results.push(this.renderComment(comment));
      }
      return _results;
    };

    CommentListView.prototype.renderComment = function(comment) {
      var view;
      view = new CommentListItemView({
        model: comment
      });
      return this.$el.find('.comment-list').append(view.render());
    };

    CommentListView.prototype.addComment = function() {
      this.model.create({
        issue_id: this.model.issue.get('id'),
        user: app.user,
        text: this.$el.find('textarea[name=text]').val()
      });
      return this.$el.find('form').get(0).reset();
    };

    return CommentListView;

  })(Backbone.View);

  CommentListItemView = (function(_super) {
    __extends(CommentListItemView, _super);

    function CommentListItemView() {
      _ref9 = CommentListItemView.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    CommentListItemView.prototype.tagName = 'li';

    CommentListItemView.prototype.template = _.template(jQuery('#tpl-comment-list-item').text());

    CommentListItemView.prototype.render = function(eventName) {
      this.setElement(jQuery(this.template(this.model.toJSON())));
      return this.el;
    };

    return CommentListItemView;

  })(Backbone.View);

  Panel = (function() {
    function Panel(el) {
      this.$el = jQuery(el);
    }

    Panel.prototype.show = function() {
      return this.$el.show();
    };

    Panel.prototype.hide = function() {
      return this.$el.hide();
    };

    return Panel;

  })();

  NewIssuePanel = (function(_super) {
    __extends(NewIssuePanel, _super);

    function NewIssuePanel(el, model) {
      var _this = this;
      this.model = model;
      NewIssuePanel.__super__.constructor.call(this, el);
      this.$el.on('submit', 'form', function(evt) {
        evt.preventDefault();
        _this.createIssue(jQuery(evt.target).serializeObject());
        return evt.target.reset();
      });
    }

    NewIssuePanel.prototype.createIssue = function(data) {
      return this.model.create(data, {
        wait: true,
        success: function(model, reponse) {
          return model.set('id', response);
        }
      });
    };

    return NewIssuePanel;

  })(Panel);

  AppRouter = (function(_super) {
    __extends(AppRouter, _super);

    function AppRouter() {
      _ref10 = AppRouter.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    AppRouter.prototype.initialize = function(config) {
      this.route('', 'list');
      this.route(/^issues\/new$/, 'newIssue');
      this.route(/^issues\/(\d+)$/, 'showIssue');
      this.route(/^labels\/([a-zA-Z0-9-]+)$/, 'showLabel');
      this.user = config.user;
      this.issueCollection = new IssueCollection(config.issues);
      this.panels = {
        newIssue: new NewIssuePanel('#new-issue-panel', this.issueCollection),
        showIssue: new Panel('#issue-details-panel'),
        listIssues: new Panel('#issue-list-panel')
      };
      this.showPanel(null);
      return this.list();
    };

    AppRouter.prototype.list = function() {
      var view;
      view = new IssueListView({
        el: this.panels.listIssues.$el.find('.issue-list').get(0),
        model: this.issueCollection
      });
      view.render();
      return this.showPanel('listIssues');
    };

    AppRouter.prototype.newIssue = function() {
      return this.showPanel('newIssue');
    };

    AppRouter.prototype.showIssue = function(id) {
      var issue, view;
      issue = this.issueCollection.get(id);
      view = new IssueView({
        el: this.panels.showIssue.$el,
        model: issue
      });
      view.render();
      return this.showPanel('showIssue');
    };

    AppRouter.prototype.showPanel = function(id) {
      var name, panel, _ref11, _results;
      _ref11 = this.panels;
      _results = [];
      for (name in _ref11) {
        panel = _ref11[name];
        if (name === id) {
          _results.push(panel.show());
        } else {
          _results.push(panel.hide());
        }
      }
      return _results;
    };

    return AppRouter;

  })(Backbone.Router);

  window.init = function(issues) {
    var user;
    user = {
      id: 1,
      name: 'Jelmer',
      email: 'jelmer@ikhoefgeen.nl'
    };
    app = new AppRouter({
      user: user,
      issues: issues
    });
    jQuery('#new-issue-panel').hide();
    jQuery('#issue-details-panel').hide();
    Backbone.history.start({
      pushState: true
    });
    jQuery(document.body).on('click', 'a', function(evt) {
      evt.preventDefault();
      return app.navigate((jQuery(this)).attr('href'), true);
    });
    return app;
  };

}).call(this);
