// Generated by CoffeeScript 1.6.3
(function() {
  var Issue, IssueCollection, IssueView, addDummyIssue, initView, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    function CollectionView(options) {
      this.children = [];
      if (options.childView != null) {
        this.childView = options.childView;
      }
      if (this.childView == null) {
        console.error('childView option is missing');
      }
      CollectionView.__super__.constructor.call(this, options);
    }

    CollectionView.prototype.initialize = function() {
      this.listenTo(this.model, 'add', this.addChildView);
      return this.listenTo(this.model, 'remove', this.removeChildModel);
    };

    CollectionView.prototype.addChildView = function(childModel) {
      childModel._view = new this.childView({
        model: childModel
      });
      childModel._view.render();
      this.children.push(childModel._view);
      return this.$el.append(childModel._view.$el);
    };

    CollectionView.prototype.removeChildModel = function(childModel) {
      var index;
      index = this.children.indexOf(childModel._view);
      if (index === -1) {
        return;
      }
      childModel._view.remove();
      childModel._view = null;
      return this.children.splice(index, 1);
    };

    CollectionView.prototype.render = function() {
      var model, _i, _len, _ref, _results;
      _ref = this.model.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (!model._view) {
          _results.push(this.addChildView(model));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    CollectionView.prototype.remove = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.remove();
      }
      return CollectionView.__super__.remove.call(this);
    };

    return CollectionView;

  })(Backbone.View);

  Backbone.sync = function() {};

  Issue = (function(_super) {
    __extends(Issue, _super);

    function Issue() {
      _ref = Issue.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Issue.prototype.defaults = {
      title: 'Unnamed Issue',
      description: 'No description given'
    };

    return Issue;

  })(Backbone.Model);

  IssueCollection = (function(_super) {
    __extends(IssueCollection, _super);

    function IssueCollection() {
      _ref1 = IssueCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    IssueCollection.prototype.model = Issue;

    return IssueCollection;

  })(Backbone.Collection);

  IssueView = (function(_super) {
    __extends(IssueView, _super);

    function IssueView() {
      _ref2 = IssueView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    IssueView.prototype.events = {
      'click .delete': function() {
        return this.model.destroy();
      }
    };

    IssueView.prototype.template = _.template(jQuery('#tpl-issue').text());

    IssueView.prototype.initialize = function() {
      return this.listenTo(this.model, 'change', this.update);
    };

    IssueView.prototype.render = function() {
      this.$el.html(this.template());
      return this.update();
    };

    IssueView.prototype.update = function() {
      this.$('.issue-title').text(this.model.get('title'));
      return this.$('.issue-description').text(this.model.get('description'));
    };

    return IssueView;

  })(Backbone.View);

  initView = function(collection) {
    var view;
    view = new Backbone.CollectionView({
      model: collection,
      childView: IssueView
    });
    jQuery(document.body).append(view.el);
    return window.view = view;
  };

  addDummyIssue = function(collection, n) {
    return collection.create({
      title: "Issue " + n,
      description: "Awesome dummy issue " + n
    });
  };

  jQuery(function() {
    var collection, n, view, _i, _j;
    collection = new IssueCollection([]);
    for (n = _i = 1; _i <= 5; n = ++_i) {
      addDummyIssue(collection, n);
    }
    view = initView(collection);
    view.render();
    for (n = _j = 10; _j <= 15; n = ++_j) {
      addDummyIssue(collection, n);
    }
    return view.render();
  });

}).call(this);
