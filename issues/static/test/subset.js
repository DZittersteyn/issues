// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.Subset = (function(_super) {
    __extends(Subset, _super);

    function Subset(options) {
      if (!options.superset instanceof Backbone.Collection) {
        throw 'options.superset has to be an instance of Backbone.Collection';
      }
      if (options.filter == null) {
        throw 'options.filter has to be a function';
      }
      this.superset = options.superset, this.filter = options.filter;
      Subset.__super__.constructor.call(this, [], options);
      this.superset.on('add', this.filterAdd, this);
      this.superset.on('remove', this.filterRemove, this);
      this.superset.on('change', this.filterChange, this);
      this.on('change', this.filterChange, this);
    }

    Subset.prototype.sync = function(action, model, options) {
      if (action === 'read' && (this.url != null)) {
        return Subset.__super__.sync.call(this, action, model, options);
      } else {
        return this.superset.sync(action, this.superset, options);
      }
    };

    Subset.prototype.filterAdd = function(model) {
      if (this.filter(model)) {
        return Subset.__super__.add.call(this, model);
      }
    };

    Subset.prototype.filterRemove = function(model) {
      return Subset.__super__.remove.call(this, model);
    };

    Subset.prototype.filterChange = function(model) {
      if (this.filter(model)) {
        return Subset.__super__.add.call(this, model);
      } else {
        return Subset.__super__.remove.call(this, model);
      }
    };

    Subset.prototype.add = function(models, options) {
      return this.superset.add(models, options);
    };

    Subset.prototype.remove = function(models, options) {
      return this.superset.remove(models, options);
    };

    return Subset;

  })(Backbone.Collection);

}).call(this);
